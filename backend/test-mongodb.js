#!/usr/bin/env node

/**
 * Script de test de la connexion MongoDB
 * Usage: node test-mongodb.js
 */

require('dotenv').config({ path: './config.env' });
const mongoose = require('mongoose');

console.log('\nüîç Test de connexion MongoDB\n' + '='.repeat(50) + '\n');

// Configuration
const MONGODB_URI = process.env.MONGODB_URI;
const DB_NAME = MONGODB_URI.split('/').pop().split('?')[0];

console.log('üìã Configuration:');
console.log(`   Base de donn√©es: ${DB_NAME}`);
console.log(`   URI: ${MONGODB_URI.replace(/:[^:@]+@/, ':****@')}\n`);

// Test de connexion
async function testConnection() {
  try {
    console.log('üîå Tentative de connexion...');
    
    await mongoose.connect(MONGODB_URI, {
      serverSelectionTimeoutMS: 5000,
    });

    console.log('‚úÖ Connexion r√©ussie!\n');

    // Informations sur la base de donn√©es
    const db = mongoose.connection.db;
    const admin = db.admin();
    
    // Version MongoDB
    const buildInfo = await admin.command({ buildInfo: 1 });
    console.log('üìä Informations MongoDB:');
    console.log(`   Version: ${buildInfo.version}`);
    
    // Collections
    const collections = await db.listCollections().toArray();
    console.log(`   Collections: ${collections.length}`);
    
    if (collections.length > 0) {
      console.log('\nüìÅ Collections disponibles:');
      for (const collection of collections) {
        const count = await db.collection(collection.name).countDocuments();
        console.log(`   - ${collection.name}: ${count} documents`);
      }
    } else {
      console.log('\n‚ö†Ô∏è  Aucune collection trouv√©e (base de donn√©es vide)');
    }

    // Test d'√©criture
    console.log('\nüß™ Test d\'√©criture...');
    const testCollection = db.collection('_test');
    const testDoc = { test: true, timestamp: new Date() };
    const insertResult = await testCollection.insertOne(testDoc);
    console.log(`   ‚úÖ Document ins√©r√©: ${insertResult.insertedId}`);
    
    // Test de lecture
    const foundDoc = await testCollection.findOne({ _id: insertResult.insertedId });
    console.log(`   ‚úÖ Document lu: ${foundDoc ? 'OK' : 'ERREUR'}`);
    
    // Nettoyage
    await testCollection.deleteOne({ _id: insertResult.insertedId });
    console.log(`   ‚úÖ Document supprim√©: OK`);
    
    // Test termin√©
    console.log('\n' + '='.repeat(50));
    console.log('‚úÖ Tous les tests sont pass√©s!');
    console.log('='.repeat(50) + '\n');

    // Statistiques
    const stats = await db.stats();
    console.log('üìà Statistiques:');
    console.log(`   Taille des donn√©es: ${(stats.dataSize / 1024 / 1024).toFixed(2)} MB`);
    console.log(`   Nombre de collections: ${stats.collections}`);
    console.log(`   Nombre d'index: ${stats.indexes}`);
    
  } catch (error) {
    console.error('\n‚ùå Erreur de connexion:');
    console.error(`   ${error.message}\n`);
    
    if (error.name === 'MongooseServerSelectionError') {
      console.log('üí° Suggestions:');
      console.log('   1. V√©rifiez que MongoDB est d√©marr√©');
      console.log('   2. V√©rifiez l\'URL de connexion dans config.env');
      console.log('   3. V√©rifiez votre connexion internet (si MongoDB Atlas)');
      console.log('   4. V√©rifiez les acc√®s r√©seau sur MongoDB Atlas\n');
    }
    
    process.exit(1);
  } finally {
    await mongoose.connection.close();
    console.log('üîå Connexion ferm√©e\n');
  }
}

// Ex√©cution
testConnection();

