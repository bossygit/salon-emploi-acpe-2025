const mongoose = require('mongoose');
const Admin = require('../models/Admin');
require('dotenv').config();

// Script pour cr√©er un admin initial
const createInitialAdmin = async () => {
  try {
    // Connexion √† MongoDB
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Connect√© √† MongoDB');

    // V√©rifier si un super-admin existe d√©j√†
    const existingSuperAdmin = await Admin.findOne({ role: 'super-admin' });
    
    if (existingSuperAdmin) {
      console.log('‚ö†Ô∏è  Un super-admin existe d√©j√†:', existingSuperAdmin.email);
      return;
    }

    // Cr√©er le super-admin initial
    const superAdmin = new Admin({
      nom: 'Admin',
      prenom: 'Super',
      email: 'admin@acpe.cg',
      password: 'AdminSalon2025!', // √Ä changer en production
      role: 'super-admin',
      permissions: [
        'view-registrations',
        'edit-registrations',
        'delete-registrations',
        'view-statistics',
        'export-data',
        'manage-admins'
      ]
    });

    await superAdmin.save();
    
    console.log('‚úÖ Super-admin cr√©√© avec succ√®s !');
    console.log('üìß Email:', superAdmin.email);
    console.log('üîë Mot de passe: AdminSalon2025!');
    console.log('‚ö†Ô∏è  IMPORTANT: Changez ce mot de passe en production !');

  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation du super-admin:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå D√©connect√© de MongoDB');
  }
};

// Ex√©cuter le script
if (require.main === module) {
  createInitialAdmin();
}

module.exports = createInitialAdmin;
